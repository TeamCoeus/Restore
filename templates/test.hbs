<html>
    <style>
        #myProgress {
            width: 100%;
            background-color: #ddd;
        }

        #myBar {
            width: 0%;
            height: 30px;
            background-color: #4CAF50;
            text-align: center;
            line-height: 30px;
            color: white;
        }
    </style>

    <h1>Test</h1>
    <button onclick="createBackup()">Create backup</button>
    <button onclick="deleteBackup()">Delete backup</button>
    <button onclick="restoreBackup()">Restore backup</button>

    <h1>Backup POC Progress Bar</h1>

    <div id="myProgress">
    <div id="myBar">0%</div>
    </div>

    <p id="completeData">Data</p>

    <script src="/socket.io/socket.io.js"></script>
    
    <script>
        let socket = io();
        const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZjZhNWRmNWRhODAzZTE5ZDIzNzYzNDciLCJpYXQiOjE2MDE3NjQwNDR9.1ZaMUD9K629Ic6zOQ4HBWMMk67DKAXI5CMlKLepEaqA"
        socket.on("Error", error => {
            console.log("Error: " + JSON.stringify(error, null, 2))
        })
        socket.on("Update", update => {
            console.log("Update: " + JSON.stringify(update, null, 2))
            if (update.progress) {
                var elem = document.getElementById("myBar");
                elem.style.width = update.progress.percent;
                elem.innerHTML = update.progress.percent;
            }

            if (update.complete && update.req == "create_backup") {

                var elem = document.getElementById("myBar");
                elem.style.width = "100%";
                elem.innerHTML = "100%";

                var completePara = document.getElementById("completeData");
                completePara.innerHTML = JSON.stringify(update, null, 2)

                socket.emit("delete_backup", {
                    auth: token,
                    body: {
                        id: update.stats.id,
                        removeFiles: true
                    }
                });
            }
        })
        socket.on("Shutdown", message => {
            console.log(JSON.stringify(message, null, 2))
        })
        const createBackup = () => {
            socket.emit("create_backup", {
                auth: token,
                body: {
                    //sources: ["file:/root/Testing/sources/test.py", "folder:/root/Testing/sources/pics"],
                    sources: ["folder:/root/Restore"],
                    //targets: ["local:/root/Testing/targets/target1.zip", "local:/root/Testing/targets/target2.zip"],
                    targets: ["local:/root/Testing/targets/restore2.zip"],
                    alias: "Large test"
                }
            });
        }
        const deleteBackup = () => {
            socket.emit("delete_backup", {
                auth: token,
                body: {
                    id: "5f807d1d263350d3292bb0e9",
                    removeFiles: true
                }
            });
        }
        const restoreBackup = () => {
            socket.emit("restore_backup", {
                auth: token,
                body: {
                    id: "5f805a9841f50ccdb8b980a5",
                    target: 0,
                    restoreTarget: "local:/root/Testing/restores",
                    extract: true
                }
            })
        }
    </script>
</html>